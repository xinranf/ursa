plugins {
    id "com.android.application"
    id 'org.jetbrains.kotlin.android'
//    id 'com.google.gms.google-services'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'kotlinx-serialization'
//    id 'com.android.application' version '8.6.1' apply false
}

// Path to local QNN SDK.
// Download QNN SDK from https://qpm.qualcomm.com/#/main/tools/details/qualcomm_ai_engine_direct
def qnnSDKLocalPath="/Users/xinran/Desktop/capstone/qnn/2.31.0.250130"

// List of model assets
def models = ["llama3_2_3b"]
// Relative asset path for model configuration and binaries
def relAssetsPath = "src/main/assets/models/"
def buildDir = project(":ChatApp").getLayout().getBuildDirectory()
def libsDir = buildDir.dir("libs")

android {
    compileSdk Integer.valueOf(androidCompileSDK)
    compileSdk 34

    defaultConfig {
        applicationId "com.quicinc.chatapp"


        // TODO: use androidMinSDK value from gradle.properties once it updates to 31
        minSdk Integer.valueOf(31)
        targetSdk Integer.valueOf(androidTargetSDK)
        minSdk 31
        targetSdk 33
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17"
                abiFilters "arm64-v8a"
                arguments "-DQNN_SDK_ROOT_PATH=" + qnnSDKLocalPath
            }
        }
        sourceSets {
            main {
                jniLibs.srcDir libsDir
            }
        }
        signingConfig signingConfigs.debug
    }
    buildTypes {
        release {
            debuggable false
            crunchPngs true
            minifyEnabled true
            shrinkResources true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.4.2'
    }

    packagingOptions {
        jniLibs.useLegacyPackaging = true
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    namespace "com.quicinc.chatapp"
    externalNativeBuild {
        cmake {
            path file("src/main/cpp/CMakeLists.txt")
            version "3.22.1"
        }
    }
    packagingOptions {
        // Extract native libraries so they"re accessible via the file system directly.
        jniLibs.useLegacyPackaging = true
    }
    aaptOptions {
        noCompress "bin", "json"
    }

    preBuild.doFirst {
        // Check if QNN SDK is set correctly
        if (!file(qnnSDKLocalPath).exists()) {
            throw new RuntimeException("QNN SDK does not exist at " + qnnSDKLocalPath + ". Please set `qnnSDKLocalPath` in build.gradle.");
        }

        // Copy required QNN libs
        if (!file(qnnSDKLocalPath + "/lib/aarch64-android/libGenie.so").exists()) {
            throw new RuntimeException("libGenie does not exist. Please set `qnnSDKLocalPath` in build.gradle.");
        }

        // Ensure genie-config and tokenizer is present
        models.each { model ->
            if (!file(relAssetsPath + model + "/genie-config.json").exists()) {
                throw new RuntimeException("Missing genie-config.json for " + model + ".")
            }
            if (!file(relAssetsPath + model + "/tokenizer.json").exists()) {
                throw new RuntimeException("Missing tokenizer.json for " + model + ".")
            }
        }

        def libsABIDir = buildDir.dir("libs/arm64-v8a")
        copy {
            from qnnSDKLocalPath

            include "**/lib/aarch64-android/libQnnHtp.so"
            include "**/lib/aarch64-android/libQnnHtpPrepare.so"
            include "**/lib/aarch64-android/libQnnSystem.so"
            include "**/lib/aarch64-android/libQnnSaver.so"
            include "**/lib/hexagon-v**/unsigned/libQnnHtpV**Skel.so"
            include "**/lib/aarch64-android/libQnnHtpV**Stub.so"

            into libsABIDir
            // Copy libraries without directory structure
            eachFile {
                path = name
            }
            includeEmptyDirs = false
        }
    }
}

dependencies {
    implementation fileTree(include: ["*.jar", "*.aar"], dir: "libs")
    implementation files('libs/qtld-release')
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'com.google.guava:guava:32.1.2-android'

    // AndroidX
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation 'androidx.activity:activity-compose:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
    implementation 'androidx.navigation:navigation-compose:2.7.7'
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:2.6.1"

    // Compose
    def compose_version = "1.4.0"
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.compose.material3:material3:1.1.0-beta01'
    implementation 'androidx.compose.material:material-icons-extended:1.4.0'
    implementation 'androidx.compose.ui:ui-viewbinding:1.4.0'
    implementation 'androidx.compose.ui:ui-util:1.4.0'
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"

    // Firebase
//    implementation platform('com.google.firebase:firebase-bom:31.3.0')
//    implementation 'com.google.firebase:firebase-analytics-ktx'
//    implementation 'com.google.firebase:firebase-firestore-ktx'

    // Dagger Hilt
//    implementation "com.google.dagger:hilt-android:2.44"
//    kapt "com.google.dagger:hilt-compiler:2.44"

    // Hilt
    implementation "com.google.dagger:hilt-android:2.44"
    kapt "com.google.dagger:hilt-compiler:2.44"

//// Hilt with ViewModel
//    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
//    kapt "androidx.hilt:hilt-compiler:1.0.0"
//
//// Lifecycle ViewModel
//    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1"
//    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
//    kapt "androidx.hilt:hilt-compiler:1.0.0"

    // Serialization & coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"
    implementation 'com.google.code.gson:gson:2.9.0'

    // TensorFlow
    implementation 'org.tensorflow:tensorflow-lite:2.13.0'
    implementation 'org.tensorflow:tensorflow-lite-select-tf-ops:2.9.0'
    implementation 'org.tensorflow:tensorflow-lite-support:0.4.3'
    implementation 'org.tensorflow:tensorflow-lite-task-vision-play-services:0.4.2'

    // Networking
    def retrofit_version = '2.9.0'
    def okhttp_version = '4.10.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    // Rich Text
    def richtext_version = '0.16.0'
    implementation "com.halilibo.compose-richtext:richtext-commonmark:$richtext_version"
    implementation "com.halilibo.compose-richtext:richtext-ui-material:$richtext_version"
    implementation "com.halilibo.compose-richtext:richtext-ui-material3:$richtext_version"

    // Utilities
    implementation "com.google.accompanist:accompanist-systemuicontroller:0.28.0"
    implementation "com.bytedance.tools.codelocator:codelocator-core:2.0.4"
    implementation 'com.github.wendykierp:JTransforms:3.1'
    implementation("io.coil-kt:coil-compose:2.3.0")

    // Testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}


if (System.getProperty("user.dir") != project.rootDir.path) {
    throw new RuntimeException("This project should be opened from the `android` directory (parent of ChatApp directory), NOT the ChatApp directory.")
}
